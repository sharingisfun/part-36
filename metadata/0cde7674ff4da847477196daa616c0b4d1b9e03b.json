{"title":"Cyber Secrets Ep2x05: Heartbleeding Attack - OpenSSL","uid":9954456,"size":453091955,"categoryP":"video","categoryS":"hd___tv_shows","magnet":"?xt=urn:btih:0cde7674ff4da847477196daa616c0b4d1b9e03b&amp;dn=Cyber+Secrets+Ep2x05%3A+Heartbleeding+Attack+-+OpenSSL&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":1,"leechers":1,"uploader":"CyberSecrets","files":1,"time":1397438691,"description":"Good morning.  Welcome to another episode of Cyber Secrets.  In this episode, we will cover basics of the Heartbleeding / Heartbleed / Heartbleeded attack and how it can effect you.  If you do not believe it could, think again...  Nice shirt by the way...\n\nHere is a problem/solution explanation for those that are interested. \n- The video can also be found at\n\nTo quote heartbleeding.org, &quot;The Heartbleed bug allows anyone on the Internet to read the memory of the systems protected by the vulnerable versions of the OpenSSL software. This compromises the secret keys used to identify the service providers and to encrypt the traffic, the names and passwords of the users and the actual content. This allows attackers to eavesdrop on communications, steal data directly from the services and users and to impersonate services and users.&quot;\n\nTo be fair, this is a simple stupid bug that any programmer could fix and yet most programmers still make on a regular basis.  Basically, someone forgot to validate a variable just like 95% of the vulnerabilities out there.  Simple as that.  Since it is Open Source, everyone had the opportunity to see it, but as most simple mistakes, no one does.  It is not just the programmer that wrote the code that is at fault, but EVERYONE that used the code because they ALL had the chance to look at it and fix it.  The unfortunate result of this colossal blunder is that this one simple mistake made OpenSSL practically useless since it would allow an attacker to see the &quot;protected&quot; data anyway.  This is not a call to stop using Open Source.  It is a statement that everyone should understand that they could have fixed it if they cared to look.  This is actually the biggest benefit of Open source.\n\nThe Heartbleed attack works like a buffer overflow.  memcpy copies data, but it has three variables.  The first variable is the final destination of the data to be copied. The second variable is the location of the data to be copied. The third variable is the amount of data...  Just like in a buffer overflow, you alter the last section or amount, and you can start to read what was in the buffer.  And like this old buffer overflows, it comes down to trusting the variable without validation.  For example; if the payload claims to be 64k when it is really 0 KB, you have data leakage...  \n\nWhat information could be leaked?  \n* digital certificates\n* Usernames/Passwords\n* Medical information\n* Bank account details\n* You name it\n\nHow do you fix it?\n* Update.  Then change sensitive information like passwords.\n\nWhat do you have to do when a certificate has been compromised?\n\nRevoke the cert.  Issue a new cert through the Registration Authority (RA).  Request new cert from Certificate Authority (CA).  Issue the new cert.  Unencrypted ALL data encrypted with the old cert.  Re-encrypt that data with the new cert.  Destroy the old cert.  Not doing this means your are doing it wrong and are a risk to the organization.  Same as assuming the certs were not compromised.  This is the cost of doing  business in the Tech age.\n---\n\nIf you have any questions or comments, please feel free to fire away.","torrent":{"xt":"urn:btih:0cde7674ff4da847477196daa616c0b4d1b9e03b","amp;dn":"Cyber+Secrets+Ep2x05%3A+Heartbleeding+Attack+-+OpenSSL","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"0cde7674ff4da847477196daa616c0b4d1b9e03b","infoHashBuffer":{"type":"Buffer","data":[12,222,118,116,255,77,168,71,71,113,150,218,166,22,192,180,209,185,224,59]},"announce":[],"urlList":[]}}